#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de g√©n√©ration du fichier api_secrets.json √† partir du .env
Utilise la configuration unifi√©e
"""

import json
import os
from pathlib import Path
from dotenv import load_dotenv

def generate_api_secrets():
    """G√©n√®re le fichier api_secrets.json depuis le .env"""

    # Charger le .env
    project_root = Path(__file__).parent.parent.resolve()
    env_file = project_root / '.env'

    if not env_file.exists():
        print(f"‚ùå Fichier .env non trouv√©: {env_file}")
        return False

    load_dotenv(env_file)
    print(f"‚úÖ Chargement du .env depuis: {env_file}")

    # Cr√©er la structure api_secrets.json
    api_secrets = {
        "SMTP_GMAIL": {
            "service": "Gmail SMTP",
            "secrets": {
                "SMTP_SERVER": "smtp.gmail.com",
                "SMTP_PORT": 587,
                "SMTP_EMAIL": os.getenv('SENDER_EMAIL', ''),
                "SMTP_PASSWORD": os.getenv('SENDER_PASSWORD', '')
            }
        },
        "OVH_SMS": {
            "service": "OVH SMS via Email",
            "secrets": {
                "COMPTE_SMS": os.getenv('OVH_SERVICE_NAME', ''),
                "UTILISATEUR_SMS": "default",
                "MOT_DE_PASSE_SMS": os.getenv('OVH_APP_SECRET', ''),
                "EXPEDITEUR_SMS": os.getenv('SMS_SENDER', 'PhiPEREZ'),
                "OVH_EMAIL": os.getenv('OVH_EMAIL_ENVOI', 'email2sms@ovh.net')
            }
        }
    }

    # Validation
    if not api_secrets['SMTP_GMAIL']['secrets']['SMTP_EMAIL']:
        print("‚ö†Ô∏è ATTENTION: SENDER_EMAIL manquant dans .env")

    if not api_secrets['SMTP_GMAIL']['secrets']['SMTP_PASSWORD']:
        print("‚ö†Ô∏è ATTENTION: SENDER_PASSWORD manquant dans .env")

    if not api_secrets['OVH_SMS']['secrets']['COMPTE_SMS']:
        print("‚ö†Ô∏è ATTENTION: OVH_SERVICE_NAME manquant dans .env")

    # D√©terminer le chemin de sortie selon l'environnement
    import sys
    if sys.platform.startswith('linux') and os.path.exists('/home/ubuntu'):
        # VPS
        output_dir = Path('/home/ubuntu/.api_secret_infos')
        output_dir.mkdir(parents=True, exist_ok=True)
        output_file = output_dir / 'api_secrets.json'
    else:
        # Local
        output_file = project_root / 'api_secrets.json'

    # √âcrire le fichier
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(api_secrets, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ Fichier api_secrets.json cr√©√©: {output_file}")

        # Afficher le r√©sum√©
        print("\n" + "=" * 80)
        print("üìã CONTENU DE api_secrets.json")
        print("=" * 80)
        print(json.dumps(api_secrets, indent=2, ensure_ascii=False))
        print("=" * 80)

        # S√©curiser les permissions sur Linux
        if sys.platform.startswith('linux'):
            os.chmod(output_file, 0o600)
            print(f"üîí Permissions s√©curis√©es (600) appliqu√©es")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du fichier: {e}")
        return False

if __name__ == "__main__":
    import sys
    # Fix Windows encoding issues
    if sys.platform == 'win32':
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

    print("\n[GENERATION] api_secrets.json")
    print("=" * 80)

    success = generate_api_secrets()

    if success:
        print("\n‚úÖ G√©n√©ration termin√©e avec succ√®s!")
    else:
        print("\n‚ùå √âchec de la g√©n√©ration")
        exit(1)
